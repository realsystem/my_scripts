#!/bin/bash -ex

# fuel3 <env_name> <install_plugins?> <remove_env?> <create_env?> <remove_all_nodes?> <add_nodes?> <deploy?> <manage?> <plugins_remove?>
# fuel3 lcm1 p w c r a d m
# get plugins
if [ "$2" == "p" ]; then
  #plug_url="http://mirrors.mtn5.cci.att.com/aic-mos/stable/drop4/main/9.0/fuel-plugins-9.0/"
  #plug_url="http://mirrors.mtn5.cci.att.com/aic-mos/stable/3.0.1/fuel-plugins-9.0/"
  #plug_url="http://mirrors.mtn5.cci.att.com/aic-mos/stable/main/9.0/fuel-plugins-9.0/"
  plug_url="http://mirrors-aic.it.att.com/aic-mos/current/main/9.0/fuel-plugins-9.0/"
  #plug_url="http://mirrors-aic.it.att.com/aic-mos/stable/3.0.2/fuel-plugins-9.0/"
  plug_list="lma_collector aic-fuel-plugin fuel-plugin-lcm elasticsearch_kibana influxdb_grafana alerting contrail"
  #plug_list="lma_collector aic-fuel-plugin fuel-plugin-lcm contrail"
  for p in ${plug_list}; do
    echo $p
    p_name=$(curl ${plug_url} -s | grep ${p} | awk -F'href=\"' '{print $2}' | awk -F'\">' '{print $1}' | sed '/^$/d' | tail -1)
    wget -nc ${plug_url}${p_name}
    fuel plugins --install ${p_name}
  done
fi
ename=$1
##clean old env
enum=$(fuel env  | grep $ename | awk '{print $1}')
if [ "$3" == "w" ] && [ -n "$enum" ]; then
  fuel --env $enum env --force delete
fi
##clean plugins
if [ "$9" == "pr" ]; then
  for plug in $(fuel plugins | grep ubuntu | awk '{print $3}'); do pver=$(fuel plugins | grep $plug | awk '{print $5}'); fuel plugins --remove $plug==$pver; done
fi
##create new env
if [ "$4" == "c" ]; then
  rel=$(fuel release | grep "Ubuntu 14.04" | awk '{print $1}')
  fuel env create --name $ename --rel $rel --net-segment-type tun
  enum=$(fuel env  | grep $ename | awk '{print $1}')
  ##update env
  fuel env --env $enum --attributes --download
  perl -i -0pe 's/      default: false\n      enabled: false/      default: false\n      enabled: true/g' cluster_${enum}/attributes.yaml
  perl -i -0pe 's/          label: Enable public VIP\n          type: checkbox\n          value: false/          label: Enable public VIP\n          type: checkbox\n          value: true/' cluster_${enum}/attributes.yaml
  perl -i -0pe 's/      value: false\n      weight: 12/      value: true\n      weight: 12/' cluster_${enum}/attributes.yaml
  perl -i -0pe 's/          value: \x27\x27\n          weight: 40/          value: \x27http:\/\/gerrit.mtn5.cci.att.com:18080\/lcm_control\x27\n          weight: 40/' cluster_${enum}/attributes.yaml
  perl -i -0pe 's/label: Install Murano\n      type: checkbox\n      value: false/label: Install Murano\n      type: checkbox\n      value: true/g' cluster_${enum}/attributes.yaml
  perl -i -0pe 's/label: Install Ceilometer and Aodh\n      type: checkbox\n      value: false/label: Install Ceilometer and Aodh\n      type: checkbox\n      value: true/g' cluster_${enum}/attributes.yaml
  fuel env --env $enum --attributes --upload
fi
##add nodes to env
function add_node() {
# 1 - number
# 2 - env ID
# 3 - comma separataed role list
for n in {1..$1}; do
  nnum=$(fuel node | grep discover | grep -v mongo | grep -v lcm | grep -v aic | grep -v contrail | grep -v kibana | grep -v grafana | grep -v alert | awk '{print $1}' | head -n1)
  if [ -n "$nnum" ]; then
    fuel --env $2 node set --node $nnum --role $3
  fi
done
}
if [ "$5" == "r" ]; then
  fuel --env $enum node remove --all
fi
if [ "$6" == "a" ]; then
  add_node 1 $enum aic-compute
  add_node 1 $enum lcm
  add_node 1 $enum mongo
  add_node 1 $enum aic-controller,aic-haproxy,aic-swift-proxy,aic-cinder-volume
  add_node 1 $enum aic-identity
  add_node 1 $enum aic-dbng
  add_node 1 $enum aic-mistral
  add_node 1 $enum aic-swift-storage
  add_node 1 $enum contrail-config,contrail-db,contrail-control
  add_node 1 $enum contrail-analytics,contrail-analytics-db
  add_node 1 $enum elasticsearch_kibana,influxdb_grafana,infrastructure_alerting
fi
if [ "$7" == "d" ]; then
  fuel env --env $enum
  fuel node --env $enum | grep lcm
  fuel deploy-changes --env $enum
fi
if [ "$8" == "m" ]; then
  lcm_ip=$(fuel node --env $enum | grep lcm | awk {'print $10'})
  lcm_env_id="3_0_1"
  ret=$(ssh fuel@$lcm_ip curl -X GET -H "Content-Type:application/json" -H "Accept:application/json" -k -u deploy_user:deploy_passwd https://${lcm_ip}/api/status -s)
  echo $ret | python -mjson.tool
  ret=$(ssh fuel@$lcm_ip curl -X GET -H "Content-Type:application/json" -H "Accept:application/json" -k -u deploy_user:deploy_passwd https://${lcm_ip}/api/environments -s)
  echo $ret | python -mjson.tool
  ret=$(ssh fuel@$lcm_ip curl -X POST -H "Content-Type:application/json" -H "Accept:application/json" -k -u deploy_user:deploy_passwd https://${lcm_ip}/api/environments/${lcm_env_id}/smart_proxies/1/import_puppetclasses -s)
  echo $ret
  ret=$(ssh fuel@$lcm_ip curl -X GET -H "Content-Type:application/json" -H "Accept:application/json" -k -u deploy_user:deploy_passwd https://${lcm_ip}/api/hosts -s)
  hosts_num=$(echo $ret | python -mjson.tool | grep "\"total" | awk '{print $2}')
  for h in {1..$hosts_num}; do
    ret=$(ssh fuel@$lcm_ip "curl -X PUT -H 'Content-Type:application/json' -H 'Accept:application/json' -k -u deploy_user:deploy_passwd https://${lcm_ip}/api/hosts/${h} -s --data '{\"host\":{\"id\":1, \"environment_name\":\"${lcm_env_id}\", \"managed\":true}}'")
    echo $ret
done
ret=$(hostname)
domain_suf=$(echo ${ret#nailgun})
class_list=$(ssh fuel@$lcm_ip "curl -X GET -H 'Content-Type:application/json' -H 'Accept:application/json' -k -u deploy_user:deploy_passwd https://${lcm_ip}/api/environments/${lcm_env_id}/puppetclasses -s --data '{\"per_page\": 1000}'")
for role_name in compute identity contrail_db contrail_config contrail_control dbng swift_proxy mongo swift_storage haproxy controller; do
  tmp_ret=$(echo $class_list | python -mjson.tool  | grep -B1 -E "lcm_role.*${role_name}" | grep "id\"\:" | awk '{print $2}')
  class_id=${tmp_ret%","}
  node_id=$(fuel --env $enum node | grep ${role_name/_/-} | awk '{print $1}')
  if [ -n "$node_id" ]; then
    node_hostname="node-${node_id}${domain_suf}"
    ret=$(ssh fuel@$lcm_ip "curl -X POST -H 'Content-Type:application/json' -H 'Accept:application/json' -k -u deploy_user:deploy_passwd https://${lcm_ip}/api/hosts/${node_hostname}/puppetclass_ids -s --data '{\"hostgroup_id\":null, \"puppetclass_id\":\"${class_id}\"}'")
    echo $ret
  fi
done
#ret=$(ssh fuel@$lcm_ip curl -X GET -H "Content-Type:application/json" -H "Accept:application/json" -k -u deploy_user:deploy_passwd https://${lcm_ip}/api/hosts/1 -s)
#echo $ret | python -mjson.tool | grep environment_name
#ret=$(ssh fuel@$lcm_ip "curl -X GET -H "Content-Type:application/json" -H "Accept:application/json" -k -u deploy_user:deploy_passwd https://${lcm_ip}/api/puppetclasses -s")
#echo $ret | python -mjson.tool
#ret=$(ssh fuel@$lcm_ip curl -X GET -H "Content-Type:application/json" -H "Accept:application/json" -k -u deploy_user:deploy_passwd https://${lcm_ip}/api/hosts/1 -s)
#echo $ret | python -mjson.tool | grep hostgroup
#ret=$(ssh fuel@$lcm_ip curl -X GET -H "Content-Type:application/json" -H "Accept:application/json" -k -u deploy_user:deploy_passwd https://${lcm_ip}/api/hosts/1/puppetclass_ids -s)
#echo $ret | python -mjson.tool
fi
